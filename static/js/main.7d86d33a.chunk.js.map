{"version":3,"sources":["components/Board/Board.js","components/PlayerPanel/PlayerPanel.js","components/GameControls/Die/Die.consts.js","components/GameControls/Die/Die.js","components/GameControls/GameControls.js","App.consts.js","App.gameActions.js","App.js","reportWebVitals.js","index.js"],"names":["Board","children","className","PlayerPanel","this","props","player","name","overallScore","currentScore","active","left","right","classnames","classNames","Component","defaultProps","DIE_VALUES","Die","value","c1","c2","c3","c4","c5","c6","c7","c8","c9","id","GameControls","onGameReset","onRoll","onHold","dieValue","disabled","onClick","PLAYER_STATE","INITIAL_STATE","p1","p2","currentPlayerId","winner","undefined","act","gameState","actions","reduce","state","action","setCurrentScore","currentPlayer","rollDice","Math","floor","random","zeroCurrentScore","toggleCurrentPlayer","updateCurrentScore","checkForWin","win","announceWinner","alert","rollCurrentIntoOverviewScore","App","setState","Boolean","handleOnGameReset","bind","handleOnRoll","handleOnHold","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d86d33a.chunk.js","sourcesContent":["import React from 'react';\nimport './Board.scss';\n\nexport default function Board ({children}) {\n\n  return (\n    <div className=\"pg-board\">\n      {children}\n    </div>\n  );\n}","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport './PlayerPanel.scss';\n\nexport default class PlayerPanel extends Component {\n\n  static propTypes = {\n    player: PropTypes.object.isRequired,\n    active: PropTypes.bool,\n    left: PropTypes.bool,\n    right: PropTypes.bool\n  };\n\n  static defaultProps = {\n    active: false,\n    left: false,\n    right: false\n  };\n\n  render() {\n    const { player: { name, overallScore, currentScore }, active, left, right } = this.props;\n    const classnames = classNames('pg-player-panel', { active, left, right });\n    return (\n      <div className={classnames}>\n        <div className=\"player-name-container\">\n          <div className=\"player-name\">{ name }</div>\n          <div className=\"overall-score\">{ overallScore }</div>\n        </div>\n        <div className=\"current-score-container\">\n          <div className=\"current-score\">{ currentScore }</div>\n        </div>\n      </div>\n    );\n  }\n}","export const DIE_VALUES = {\n  1: [\n    ' ',    ' ',    ' ',\n    ' ',    'üêΩ',   ' ',\n    ' ',    ' ',    ' '\n  ], 2: [\n    'üî¥',    ' ',    ' ',\n    ' ',    ' ',    ' ',\n    ' ',    ' ',    'üî¥'\n  ], 3: [\n    'üî¥',    ' ',    ' ',\n    ' ',    'üî¥',    ' ',\n    ' ',    ' ',    'üî¥'\n  ], 4: [\n    'üî¥',    ' ',    'üî¥',\n    ' ',    ' ',    ' ',\n    'üî¥',    ' ',    'üî¥'\n  ], 5: [\n    'üî¥',    ' ',    'üî¥',\n    ' ',    'üî¥',    ' ',\n    'üî¥',    ' ',    'üî¥'\n  ], 6: [\n    'üî¥',    ' ',    'üî¥',\n    'üî¥',    ' ',    'üî¥',\n    'üî¥',    ' ',    'üî¥'\n  ],\n};","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { DIE_VALUES } from './Die.consts';\n\nimport './Die.scss';\n\nexport default class Die extends Component {\n\n  static propTypes = {\n    value: PropTypes.number.isRequired\n  };\n\n  static defaultProps = {\n    value: 1\n  };\n\n  render() {\n    const { value } = this.props;\n    const [c1, c2, c3, c4, c5, c6, c7, c8, c9] = DIE_VALUES[value];\n    const classnames = classNames('pg-die');\n    return (\n      <div className={classnames}>\n        <div className=\"row\">\n          <div id=\"c1\" className=\"cell\">{c1}</div>\n          <div id=\"c2\" className=\"cell\">{c2}</div>\n          <div id=\"c3\" className=\"cell\">{c3}</div>\n        </div>\n        <div className=\"row\">\n          <div id=\"c4\" className=\"cell\">{c4}</div>\n          <div id=\"c5\" className=\"cell\">{c5}</div>\n          <div id=\"c6\" className=\"cell\">{c6}</div>\n        </div>\n        <div className=\"row\">\n          <div id=\"c7\" className=\"cell\">{c7}</div>\n          <div id=\"c8\" className=\"cell\">{c8}</div>\n          <div id=\"c9\" className=\"cell\">{c9}</div>\n        </div>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport Die from './Die/Die';\n\nimport './GameControls.scss';\n\nexport default class GameControls extends Component {\n\n  static propTypes = {\n    onGameReset: PropTypes.func.isRequired,\n    onRoll: PropTypes.func.isRequired,\n    onHold: PropTypes.func.isRequired,\n    dieValue: PropTypes.number,\n    disabled: PropTypes.bool\n  };\n\n  static defaultProps = {\n    dieValue: 1,\n    disabled: false\n  };\n\n  render() {\n    const { onGameReset, onRoll, onHold, dieValue, disabled } = this.props;\n    const classnames = classNames('pg-game-controls');\n    return (\n      <div className={classnames}>\n        <div className=\"reset-btn-container\">\n          <button onClick={onGameReset}>Reset Game</button>\n        </div>\n        <div className=\"die-container\">\n          <Die value={dieValue} />\n        </div>\n        <div className=\"roll-btn-container\">\n          <button onClick={onRoll} disabled={disabled}>Roll</button>\n        </div>\n        <div className=\"hold-btn-container\">\n          <button onClick={onHold} disabled={disabled}>Hold</button>\n        </div>\n      </div>\n    );\n  }\n}","export const PLAYER_STATE = {\n  overallScore: 0,\n  currentScore: 0\n};\n\nexport const INITIAL_STATE = {\n  p1: {name: 'P1', ...PLAYER_STATE},\n  p2: {name: 'P2', ...PLAYER_STATE},\n  currentPlayerId: 'p1',\n  dieValue: 1,\n  winner: undefined\n};\n\nexport const WIN_THRESHOLD = 28;\nexport const LOSER_NUMBER = 1;","import { WIN_THRESHOLD } from './App.consts';\n\n/*\n  Game actions are split into categories: utils, and actions.\n\n  A game action is a function that takes game state, and returns game state.\n  Actions take no other parameters, and are intended to be fed into act()\n\n  Utils are functions that help the process. They do not necessarily follow the method\n  signature of actions, although they can still take and return state.\n*/\n\n///////////////////////////////////////////////////////////////////////////////////////\n////////                               UTILITIES                               ////////\n///////////////////////////////////////////////////////////////////////////////////////\n\n\n/**\n * pass gameState through an array of actions\n * @param {state} gameState initial state\n * @param {array} actions array of actions to take\n * @returns updated gameState (does not mutate initial state)\n */\nexport function act(gameState, actions) {\n  return actions.reduce((state, action) => action(state), {...gameState});\n}\n\nexport function setCurrentScore({ currentPlayerId, ...gameState}, currentScore) {\n  const currentPlayer = gameState[currentPlayerId];\n  return {\n    ...gameState, currentPlayerId,\n    [currentPlayerId]: {\n      ...currentPlayer,\n      currentScore\n    }\n  };\n}\n\nexport const utils = {\n  act, setCurrentScore\n};\n\n///////////////////////////////////////////////////////////////////////////////////////\n////////                               ACTIONS                                 ////////\n///////////////////////////////////////////////////////////////////////////////////////\n\nexport function rollDice(gameState) {\n  const dieValue = Math.floor(Math.random() * 6) + 1;\n  return ({ ...gameState, dieValue });\n}\n\nexport function zeroCurrentScore({ currentPlayerId, ...gameState}) {\n  return setCurrentScore({currentPlayerId, ...gameState}, 0);\n}\n\nexport function toggleCurrentPlayer({ currentPlayerId, ...gameState}) {\n  return {\n    ...gameState,\n    currentPlayerId: currentPlayerId === 'p1' ? 'p2' : 'p1'\n  };\n}\n\nexport function updateCurrentScore({ currentPlayerId, dieValue, ...gameState }) {\n  const { currentScore } = gameState[currentPlayerId];\n\n  return setCurrentScore({currentPlayerId, dieValue, ...gameState}, currentScore + dieValue);\n}\n\nexport function checkForWin({ currentPlayerId, ...gameState }) {\n  const { currentScore, overallScore } = gameState[currentPlayerId];\n  const win = currentScore + overallScore >= WIN_THRESHOLD;\n  return {\n    ...gameState, currentPlayerId,\n    winner: win ? currentPlayerId : undefined\n  };\n}\n\nexport function announceWinner({ winner, ...gameState }) {\n  if (winner) {\n    const { name, currentScore, overallScore } = gameState[winner];\n    alert(`${name} has won with total score of ${currentScore + overallScore}! (${WIN_THRESHOLD} to win)`);\n  }\n  return { winner, ...gameState };\n}\n\nexport function rollCurrentIntoOverviewScore({ currentPlayerId, ...gameState }) {\n  const {currentScore, overallScore, ...currentPlayer} = gameState[currentPlayerId];\n  return {\n    ...gameState, currentPlayerId,\n    [currentPlayerId]: {\n      ...currentPlayer,\n      overallScore: overallScore + currentScore,\n      currentScore: 0\n    }\n  };\n}\n\nexport const actions = {\n  rollDice,  zeroCurrentScore, toggleCurrentPlayer, updateCurrentScore, checkForWin,\n  announceWinner, rollCurrentIntoOverviewScore\n}","import React, { Component } from 'react';\nimport Board from './components/Board/Board';\nimport PlayerPanel from './components/PlayerPanel/PlayerPanel';\nimport GameControls from './components/GameControls/GameControls';\nimport { INITIAL_STATE, LOSER_NUMBER } from './App.consts';\nimport {\n  act, rollDice, zeroCurrentScore, toggleCurrentPlayer,\n  updateCurrentScore, checkForWin, announceWinner, rollCurrentIntoOverviewScore\n} from './App.gameActions';\n\nimport './App.scss';\n\nexport default class App extends Component {\n\n  state = {...INITIAL_STATE};\n\n  handleOnGameReset() {\n    this.setState({...INITIAL_STATE});\n  }\n\n  /**\n   * @description determins the current player and returns a shallow copy.\n   * Good for manipulating the current player in place, but not modifying the state.\n   * @returns a copy of the current player\n  */\n  getCurrentPlayer() {\n    const { p1, p2, currentPlayerId } = this.state;\n    return currentPlayerId === 'p1' ? {...p1} : {...p2};\n  }\n\n  handleOnRoll() {\n    const state = rollDice({...this.state});\n    if (state.dieValue === LOSER_NUMBER) {\n      this.setState({\n        ...act(state, [\n          zeroCurrentScore,\n          toggleCurrentPlayer\n        ])\n      });\n    } else {\n      this.setState({\n        ...act(state, [\n          updateCurrentScore,\n          checkForWin,\n          announceWinner\n        ])\n      });\n    }\n  }\n\n  handleOnHold() {\n    this.setState({\n      ...act(this.state, [\n        rollCurrentIntoOverviewScore,\n        toggleCurrentPlayer\n      ])\n    });\n  }\n\n  render() {\n    const { p1, p2, currentPlayerId, dieValue, winner } = this.state;\n    return (\n      <div className=\"pg-app\">\n        <Board>\n          <PlayerPanel player={p1} active={currentPlayerId === 'p1'} left />\n          <GameControls dieValue={dieValue} disabled={Boolean(winner)}\n            onGameReset={this.handleOnGameReset.bind(this)}\n            onRoll={this.handleOnRoll.bind(this)}\n            onHold={this.handleOnHold.bind(this)}\n          />\n          <PlayerPanel player={p2} active={currentPlayerId === 'p2'} right />\n        </Board>\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}